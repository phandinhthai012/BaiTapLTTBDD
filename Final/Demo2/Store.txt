import {createSlice,configureStore,createAsyncThunk} from '@reduxjs/toolkit'
// import {createSlice,configureStore,createAsyncThunk} from '@reduxjs/toolkit'

export const fetchProducts = createAsyncThunk('prducts/fetchProducts',async ()=>{
  const response = await fetch('https://64583ae61a4c152cf9937c0c.mockapi.io/api/v1/todo');
  if (!response.ok) {
    throw new Error('Failed to fetch items');
  }
  const data = await response.json();
  return data;
})
export const addNew =  createAsyncThunk('prducts/addNew',async (item)=>{
  const response = await fetch('https://64583ae61a4c152cf9937c0c.mockapi.io/api/v1/type',{
    method:'POSt',
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify({cart:item}), // Truyền text vào body
  });
  if (!response.ok) {
    throw new Error('Failed to fetch items');
  }
  const data = await response.json();
  return data;
})

const productSlice = createSlice({
  name:'products',
  initialState:{
    products:[],
    cart:[] 
  },
  reducers:{
    addItemCart:(state,action)=>{
      state.cart.push(action.payload)
    },
    removeItem:(state,action)=>{
      state.cart = state.cart.filter((item) => item.id !== action.payload);
    }

  },
  extraReducers:(builder) => {
    builder.addCase(fetchProducts.fulfilled, (state, action) => {
      state.products = action.payload;
    });
    builder.addCase(addNew.fulfilled, (state) => {
      state.cart = []; 
    });
  }
})

const store = configureStore({
  reducer:{
    products:productSlice.reducer
  }
})


export default store
export const {addItemCart,removeItem} = productSlice.actions



